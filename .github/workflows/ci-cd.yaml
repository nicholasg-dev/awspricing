name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: aws-pricing-tool/backend
  ECR_REPOSITORY_FRONTEND: aws-pricing-tool/frontend
  EKS_CLUSTER_NAME: aws-pricing-cluster
  NAMESPACE: aws-pricing-tool

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    # Backend tests
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Run backend tests
      run: cd backend && npm test
      
    # Frontend tests
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Run frontend tests
      run: cd frontend && npm run test:ci
  
  build-and-push:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        
    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
  
  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      
    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ steps.login-ecr.outputs.registry | cut -d'.' -f1 }}
      run: |
        # Replace placeholders in Kubernetes manifests
        find k8s -type f -name "*.yaml" -exec sed -i "s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g" {} \;
        find k8s -type f -name "*.yaml" -exec sed -i "s|\${AWS_REGION}|${{ env.AWS_REGION }}|g" {} \;
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/mongodb.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Update image tags
        kubectl set image deployment/backend backend=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} -n ${{ env.NAMESPACE }}
        kubectl set image deployment/frontend frontend=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} -n ${{ env.NAMESPACE }}
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/backend -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=300s
